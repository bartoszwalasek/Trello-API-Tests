{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-14T13:01:03.448Z",
    "end": "2023-10-14T13:01:06.370Z",
    "duration": 2922,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "45eef33e-d313-44ae-a61e-93a4aec846bc",
      "title": "",
      "fullFile": "C:\\Users\\Lenovo\\Documents\\git\\Trello-API-Tests\\tests\\boards.test.js",
      "file": "\\tests\\boards.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a108d282-cd9a-4517-b533-46a2394e8763",
          "title": "APi tests with Trello boards",
          "fullFile": "C:\\Users\\Lenovo\\Documents\\git\\Trello-API-Tests\\tests\\boards.test.js",
          "file": "\\tests\\boards.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create a Board",
              "fullTitle": "APi tests with Trello boards Create a Board",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await spec()\n    .post(`${BASE_URL}boards/`)\n    .withQueryParams({\n        name: \"Board to test\",\n        ...credentials\n    })\nexpect(response.statusCode).to.eql(200)\nexpect(response.body.name).to.eql(\"Board to test\")\nboard = response.body",
              "err": {},
              "uuid": "daa31755-1000-41c7-81f7-b42c13efdcc9",
              "parentUUID": "a108d282-cd9a-4517-b533-46a2394e8763",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify default Lists on a Board",
              "fullTitle": "APi tests with Trello boards Verify default Lists on a Board",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const default_lists = [{name: \"To Do\"}, {name: \"Doing\"}, {name: \"Done\"}]\nconst response = await spec()\n    .get(`${BASE_URL}boards/${board.id}/lists`)\n    .withQueryParams({\n        ...credentials\n    })\n    .withHeaders({\n        Accept: 'application/json'\n    })\nexpect(response.statusCode).to.eql(200)\ndefault_lists.forEach(list => {\n    let desired_list = response.body.find(received_list => received_list.name === list.name)\n    expect(desired_list).to.include({name: list.name})\n})",
              "err": {},
              "uuid": "d6aed9df-a35d-4b7d-a82b-3282e13251b6",
              "parentUUID": "a108d282-cd9a-4517-b533-46a2394e8763",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create a List on a Board",
              "fullTitle": "APi tests with Trello boards Create a List on a Board",
              "timedOut": false,
              "duration": 350,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await spec()\n    .post(`${BASE_URL}boards/${board.id}/lists`)\n    .withQueryParams({\n        name: list_name,\n        ...credentials\n    })\n    .withHeaders({\n        Accept: 'application/json'\n    })\nexpect(response.statusCode).to.eql(200)\nexpect(response.body.name).to.eql(list_name)",
              "err": {},
              "uuid": "1c9100c7-cc04-403c-a154-29862c2b35e0",
              "parentUUID": "a108d282-cd9a-4517-b533-46a2394e8763",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Find a newly added List",
              "fullTitle": "APi tests with Trello boards Find a newly added List",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await spec()\n    .get(`${BASE_URL}boards/${board.id}/lists`)\n    .withQueryParams({\n        ...credentials\n    })\n    .withHeaders({\n        Accept: 'application/json'\n    }) \nconst new_list = response.body.find(list => list.name === list_name);\nexpect(response.statusCode).to.eql(200)\nexpect(new_list).to.include({name: list_name})",
              "err": {},
              "uuid": "ecde80b4-d765-40e9-bea8-628135d6e69b",
              "parentUUID": "a108d282-cd9a-4517-b533-46a2394e8763",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a Board",
              "fullTitle": "APi tests with Trello boards Delete a Board",
              "timedOut": false,
              "duration": 1117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await spec()\n    .delete(`${BASE_URL}boards/${board.id}`)\n    .withQueryParams({\n        ...credentials\n    })\nexpect(response.statusCode).to.eql(200)",
              "err": {},
              "uuid": "f8de9b94-b2fd-4cd3-a535-64febf8d5bf3",
              "parentUUID": "a108d282-cd9a-4517-b533-46a2394e8763",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get a Board after deleting",
              "fullTitle": "APi tests with Trello boards Get a Board after deleting",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await spec()\n    .get(`${BASE_URL}boards/${board.id}`)\n    .withQueryParams({\n        ...credentials\n    })\nexpect(response.statusCode).to.eql(404)",
              "err": {},
              "uuid": "e1068ed8-b801-4562-811b-43b65c8d2f1e",
              "parentUUID": "a108d282-cd9a-4517-b533-46a2394e8763",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "daa31755-1000-41c7-81f7-b42c13efdcc9",
            "d6aed9df-a35d-4b7d-a82b-3282e13251b6",
            "1c9100c7-cc04-403c-a154-29862c2b35e0",
            "ecde80b4-d765-40e9-bea8-628135d6e69b",
            "f8de9b94-b2fd-4cd3-a535-64febf8d5bf3",
            "e1068ed8-b801-4562-811b-43b65c8d2f1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2894,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}